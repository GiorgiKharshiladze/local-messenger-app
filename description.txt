Final Project Phase 2
CS 410: Networks and Networkings
Group Members: Giorgi, Davit
=================================================================================================================================

DESIGN:
In this project, we have 5 major modules: Connection setup, Sending a message, Receiving a message, Disconnection and Website interface.

=================================================================================================================================
1. Connection Setup
* Each new device that runs the code scans over all the IP addresses available on the current network.
* It uses broadcasting and sends a connection request to all the IP addresses and keeps track of those if a positive acknowledgement is sent back.
* Connection request consists of sending its name to everyone available on network and acknowledgement has connected devices' names itself.

=================================================================================================================================
* For sending and receiving a message we decided to use python "sockets" library utilizing TCP protocol. The reason for this is that sending text messages will be more reliable on a connection-oriented service. However, It would need n*(n-1)/2 connections in total to operate within n users.

2. Sending a message

* This module needs three arguments to operate: IP address of the receiver, type of the message (Connection request, Disconnection request, Regular message), and the text message.
* Performing a send message includes, sending it to the browser using Flask.SocketIO.
* Our chat is going to fully encrypt the message before it gets to the receiver.
* Invoke Flask.SocketIO to make updates on the front-end

3. Receiving a message

* This module is ran as a separate thread all the time when we have the program open.
* It will contain a function which handles the message depending on the message type
* On this receiver side we will need to decrypt the message sent from the user.
* Invoke Flask.SocketIO to make updates on the front-end

=================================================================================================================================
4. Disconnection

* On this part, we send a broadcast message to everybody that the user left our chatroom
* Invoke Flask.SocketIO to make updates on the front-end

=================================================================================================================================
5. Interface

* This portion is written using Flask framework in python which allows us to have web interface for the project. We are going to use HTML, CSS, JavaScript and jQuery for the visual front-end side.
* Invoked Flask.SocketIO messages are handled in javascript and will be located in the "custom.js" file.

=================================================================================================================================




